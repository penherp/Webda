1) Write a java program to accept names of ‘n’ cities, insert same into array list collection and
display the contents of same array list, also remove all these elements

import java.util.ArrayList;
import java.util.Scanner;

public class CityList {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        ArrayList<String> cities = new ArrayList<>();

        // Accept city names
        System.out.print("Enter number of cities: ");
        int n = scanner.nextInt();
        scanner.nextLine(); // Consume newline left-over
        
        for (int i = 0; i < n; i++) {
            System.out.print("Enter city name " + (i + 1) + ": ");
            String cityName = scanner.nextLine();
            cities.add(cityName);
        }

        // Display contents of ArrayList
        System.out.println("Cities in the list:");
        for (String city : cities) {
            System.out.println(city);
        }

        // Remove all elements
        cities.clear();
        System.out.println("All cities removed. List size now: " + cities.size());

        scanner.close();
    }
}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

1) Write a java program to read ‘n’ names of your friends, store it into linked list, also
display contents of the same 

import java.util.LinkedList;
import java.util.Scanner;

public class FriendList {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        LinkedList<String> friends = new LinkedList<>();

        System.out.print("Enter number of friends: ");
        int n = scanner.nextInt();
        scanner.nextLine(); 
        
        for (int i = 0; i < n; i++) {
            System.out.print("Enter friend's name: ");
            friends.add(scanner.nextLine());
        }

        System.out.println("Friends list:");
        for (String friend : friends) {
            System.out.println(friend);
        }

        scanner.close();
    }
}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

1) Write a program to create a new tree set, add some colors (string) and print out the tree set

import java.util.TreeSet;

public class ColorTreeSet {
    public static void main(String[] args) {
        TreeSet<String> colors = new TreeSet<>();

        colors.add("Red");
        colors.add("Blue");
        colors.add("Green");
        colors.add("Yellow");
        colors.add("Purple");

        System.out.println("TreeSet contents: " + colors);
    }
}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

1) Create the hash table that will maintain the mobile number and student name. Display
the contact list.

import java.util.Hashtable;
import java.util.Map;
import java.util.Scanner;

public class StudentContacts {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Hashtable<String, String> contacts = new Hashtable<>();

        System.out.print("Enter number of students: ");
        int n = scanner.nextInt();
        scanner.nextLine(); 

        for (int i = 0; i < n; i++) {
            System.out.print("Enter student name: ");
            String name = scanner.nextLine();
            System.out.print("Enter mobile number: ");
            String mobile = scanner.nextLine();
            contacts.put(mobile, name);
        }

        System.out.println("\nContact List:");
        for (Map.Entry<String, String> entry : contacts.entrySet()) {
            System.out.println(entry.getKey() + " - " + entry.getValue());
        }

        scanner.close();
    }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 1) Accept ‘n’ integers from the user. Store and display integers in sorted order having
proper collection class. The collection should not accept duplicate elements

import java.util.Scanner;
import java.util.TreeSet;

public class UniqueSortedIntegers {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        TreeSet<Integer> numbers = new TreeSet<>();

        System.out.print("Enter number of integers: ");
        int n = scanner.nextInt();

        System.out.println("Enter " + n + " integers:");
        for (int i = 0; i < n; i++) {
            numbers.add(scanner.nextInt());
        }

        System.out.println("Sorted unique integers: " + numbers);
        scanner.close();
    }
}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

1) Write a program to sort HashMap by keys and display the details before sorting and
after sorting.


import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;
import java.util.TreeMap;

public class HashMapSorting {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        HashMap<Integer, String> map = new HashMap<>();

        System.out.print("Enter number of entries: ");
        int n = scanner.nextInt();
        scanner.nextLine();

        for (int i = 0; i < n; i++) {
            System.out.print("Enter key (integer): ");
            int key = scanner.nextInt();
            scanner.nextLine();
            System.out.print("Enter value (string): ");
            String value = scanner.nextLine();
            map.put(key, value);
        }

        System.out.println("\nBefore Sorting:");
        for (Map.Entry<Integer, String> entry : map.entrySet()) {
            System.out.println(entry.getKey() + " - " + entry.getValue());
        }

        TreeMap<Integer, String> sortedMap = new TreeMap<>(map);

        System.out.println("\nAfter Sorting:");
        for (Map.Entry<Integer, String> entry : sortedMap.entrySet()) {
            System.out.println(entry.getKey() + " - " + entry.getValue());
        }

        scanner.close();
    }
}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

1) Program to define a thread for printing text on output screen for ‘n’ number of times.
Create 3 threads and run them. Pass the text ‘n’ parameters to the thread constructor.
Example: i. First thread prints “COVID19” 10 times.
 ii. Second thread prints “LOCKDOWN2020” 20 times
 iii. Third thread prints “VACCINATED2021” 30 times 


class PrintThread extends Thread {
    private String text;
    private int count;

    public PrintThread(String text, int count) {
        this.text = text;
        this.count = count;
    }

    public void run() {
        for (int i = 0; i < count; i++) {
            System.out.println(text);
        }
    }
}

public class MultiThreadPrinting {
    public static void main(String[] args) {
        PrintThread t1 = new PrintThread("COVID19", 10);
        PrintThread t2 = new PrintThread("LOCKDOWN2020", 20);
        PrintThread t3 = new PrintThread("VACCINATED2021", 30);

        t1.start();
        t2.start();
        t3.start();
    }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

1) Write a program in which thread sleep for 6 sec in the loop in reverse order from 100
to 1 and change the name of thread.

class ReverseCounter extends Thread {
    public ReverseCounter(String name) {
        super(name);
    }

    public void run() {
        for (int i = 100; i >= 1; i--) {
            System.out.println(Thread.currentThread().getName() + ": " + i);
            try {
                Thread.sleep(6000); // Sleep for 6 seconds
            } catch (InterruptedException e) {
                System.out.println("Thread interrupted");
            }
        }
    }
}

public class ReverseThread {
    public static void main(String[] args) {
        ReverseCounter thread = new ReverseCounter("ReverseCounterThread");
        thread.start();
    }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

1) Write a program that loads names and phone numbers from a text file where the data is
organized as one line per record and each field in a record are separated by a tab (\t).it
takes a name or phone number as input and prints the corresponding other value from
the hash table (hint: use hash tables).


import java.io.*;
import java.util.Hashtable;
import java.util.Scanner;

public class PhonebookLookup {
    public static void main(String[] args) {
        Hashtable<String, String> phonebook = new Hashtable<>();

        try (BufferedReader reader = new BufferedReader(new FileReader("contacts.txt"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] data = line.split("\t");
                if (data.length == 2) {
                    phonebook.put(data[0], data[1]); // Name as key, Phone number as value
                    phonebook.put(data[1], data[0]); // Phone number as key, Name as value
                }
            }
        } catch (IOException e) {
            System.out.println("Error reading file: " + e.getMessage());
            return;
        }

        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter name or phone number to search: ");
        String input = scanner.nextLine();

        if (phonebook.containsKey(input)) {
            System.out.println("Result: " + phonebook.get(input));
        } else {
            System.out.println("No match found.");
        }

        scanner.close();
    }
}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

1) Write a program to solve producer consumer problem in which a producer produces a
value and consumer consume the value before producer generate the next value. (Hint:
use thread synchronization).


class SharedResource {
    private int value;
    private boolean hasValue = false;

    public synchronized void produce(int newValue) {
        while (hasValue) { 
            try { wait(); } catch (InterruptedException e) { e.printStackTrace(); }
        }
        value = newValue;
        System.out.println("Produced: " + value);
        hasValue = true;
        notify();
    }

    public synchronized void consume() {
        while (!hasValue) { 
            try { wait(); } catch (InterruptedException e) { e.printStackTrace(); }
        }
        System.out.println("Consumed: " + value);
        hasValue = false;
        notify();
    }
}

class Producer extends Thread {
    private SharedResource resource;

    public Producer(SharedResource resource) {
        this.resource = resource;
    }

    public void run() {
        for (int i = 1; i <= 5; i++) {
            resource.produce(i);
            try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); }
        }
    }
}

class Consumer extends Thread {
    private SharedResource resource;

    public Consumer(SharedResource resource) {
        this.resource = resource;
    }

    public void run() {
        for (int i = 1; i <= 5; i++) {
            resource.consume();
            try { Thread.sleep(2000); } catch (InterruptedException e) { e.printStackTrace(); }
        }
    }
}

public class ProducerConsumer {
    public static void main(String[] args) {
        SharedResource resource = new SharedResource();
        Producer producer = new Producer(resource);
        Consumer consumer = new Consumer(resource);

        producer.start();
        consumer.start();
    }
}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

1) Write a program for a simple search engine. Accept a string to be searched. Search for
the string in all text files in the current folder. Use a separate thread for each file. The
result should display the filename, line number where the string is found.

import java.io.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

class FileSearchThread implements Runnable {
    private File file;
    private String searchString;

    public FileSearchThread(File file, String searchString) {
        this.file = file;
        this.searchString = searchString;
    }

    public void run() {
        try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
            String line;
            int lineNumber = 0;
            boolean found = false;

            while ((line = reader.readLine()) != null) {
                lineNumber++;
                if (line.contains(searchString)) {
                    System.out.println("Found in " + file.getName() + " at line " + lineNumber + ": " + line);
                    found = true;
                }
            }

            if (!found) {
                System.out.println("No match found in " + file.getName());
            }
        } catch (IOException e) {
            System.out.println("Error reading file: " + file.getName());
        }
    }
}

public class MultiThreadedSearchEngine {
    public static void main(String[] args) {
        File currentFolder = new File(".");
        File[] files = currentFolder.listFiles((dir, name) -> name.endsWith(".txt"));

        if (files == null || files.length == 0) {
            System.out.println("No text files found in the current directory.");
            return;
        }

        BufferedReader inputReader = new BufferedReader(new InputStreamReader(System.in));
        System.out.print("Enter the string to search: ");

        try {
            String searchString = inputReader.readLine();
            ExecutorService executor = Executors.newFixedThreadPool(files.length);

            for (File file : files) {
                executor.execute(new FileSearchThread(file, searchString));
            }

            executor.shutdown();
        } catch (IOException e) {
            System.out.println("Error reading input.");
        }
    }
}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

20 Marks

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


Design an HTML page which passes customer number to a search servlet. The servlet 
searches for the customer number in a database (customer table) and returns customer 
details if found the number otherwise display error message

import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * Servlet implementation class Customer
 */
@WebServlet("/Customer")
public class Customer extends HttpServlet {
	private static final long serialVersionUID = 1L;
       
    
    Connection cn;
    public void init()
    {
       try
       {
            Class.forName("org.postgresql.Driver");
            cn=DriverManager.getConnection("jdbc:postgresql:tybcs","postgres","Pass@word");
            
       }
       catch(Exception ce)
       {   
           System.out.println("Error"+ce.getMessage());
       }
 
    }
    
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		//response.getWriter().append("Served at: ").append(request.getContextPath());
	
	
	
		response.setContentType("text/html");
        PrintWriter out=response.getWriter();        
        try
        {
 
     /*   	Class.forName("org.postgresql.Driver");
           Connection cn=DriverManager.getConnection("jdbc:postgresql:tybcs","postgres","Pass@word"); */      	
        	int id=Integer.parseInt(request.getParameter("t1"));           
            
			String qry="select * from Customer1 where id="+id;
			
            
            Statement st=cn.createStatement();
            ResultSet rs=st.executeQuery(qry); 
            
            while(rs.next()) {
                out.print("<table border=1>");
                out.print("<tr>");
                out.print("<td>" + rs.getInt(1) + "</td>");
                out.print("<td>" + rs.getString(2) + "</td>");
                
                out.print("</tr>");
                out.print("</table>");
            
            }
        }
        catch(Exception se){
        	out.print(se);
        }
        out.close();
    }


	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		doGet(request, response);
	}

}

/////Customer.html
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<form action="Customer" method="GET">
            Enter Customer No:<input type="text" name="t1">
            <input type="submit" value="Submit">
        </form>

</body>
</html>

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Create a PROJECT table with fields project_id, Project_name, 
Project_description, Project_Status. etc. Insert values in the table. Display all 
the details of the PROJECT table in a tabular format on the screen.(using 
swing).(20 Marks)

import javax.swing.table.*;
import java.sql.*;
import java.awt.event.*;
import java.awt.*;
import javax.swing.*;
class ProjectDemo extends JFrame implements ActionListener       
{   
    JTextField t1,t2,t3,t4;
    JLabel l1,l2,l3,l4;
    JButton b1,b2;
    int row,column;
    ProjectDemo()
    {
        setLayout(new FlowLayout());
        setSize(500,500);
        setVisible(true);       
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
         
        l1=new JLabel("Project Id");
        add(l1);
         
        t1=new JTextField(10);
        add(t1);
         
        l2=new JLabel("Project Name");
        add(l2);
         
        t2=new JTextField(10);
        add(t2);
         
        l3=new JLabel("Project Description");
        add(l3);
         
        t3=new JTextField(10);
        add(t3);

	l4=new JLabel("Project Status");
	add(l4);
	
	t4=new JTextField(10);
	add(t4);
        
        b1=new JButton("Insert");
        add(b1);
        b1.addActionListener(this);
         
        b2=new JButton("Display");
        add(b2);
        b2.addActionListener(this);
         
        try
        {
            Class.forName("org.postgresql.Driver");
        }
        catch(Exception e)
        {
          System.out.println("Error"+e.getMessage());     
        }
    }
    public void actionPerformed(ActionEvent e2)
    {
        if(e2.getSource()==b1)
        {
            try
           {
               int pid=Integer.parseInt(t1.getText());
               String pname=t2.getText();
               String pdesc=t3.getText();
               String pstat=t4.getText(); 
      Connection conn = DriverManager.getConnection("jdbc:postgresql:tybcs","postgres","Pass@word"); 
                 
                PreparedStatement st=conn.prepareStatement("insert into Project values(?,?,?,?)");
                st.setInt(1, pid);
                st.setString(2,pname);
                st.setString(3,pdesc);
		st.setString(4,pstat);
                st.executeUpdate();
                st.close();
                JOptionPane.showMessageDialog(this,"Inserted");
                     
           }catch(Exception e)
           {
               System.out.println("Error"+e.getMessage());
           }
        }  
        if(e2.getSource()==b2)
        {
            try
           {
               
               Object[] data=new Object[3];
               DefaultTableModel dtm=new DefaultTableModel();
               JTable jt=new JTable(dtm);
               ResultSet rs;
                System.out.println("hello");
               jt.setBounds(20,20,50,50);
               String[] darr={"Project ID ","Project Name","Project Description","Project Status"};
               for(int column=0;column<4;column++)        
               {
                   dtm.addColumn(darr[column]);
               }
               Connection conn = DriverManager.getConnection("jdbc:postgresql:tybcs","postgres","postgres"); 
                Statement st=conn.createStatement();
                rs=st.executeQuery("select * from Project");
               for(row=0;rs.next();row++)        
               {
                  for(int column=0;column<4;column++)        
                  {
                      data[column]=rs.getObject(column+1);
                  }
                  dtm.addRow(data);
               }
               rs.close();
               getContentPane().add(new JScrollPane(jt));
           }catch(Exception e)
           {
                
           }
        }
    }
    public static void main(String[] args) 
    {
        new ProjectDemo();
    }
     
}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 Create a MOBILE table with fields Model_Number, Model_Name, Model_Color, 
Sim_Type, NetworkType, BatteryCapacity, InternalStorage, RAM and ProcessorType. 
Insert values in the table. Write a menu driven program to pass the input using 
Command line argument to perform the following operations on MOBILE table. 1. 
Insert 2. Modify 3. Delete 4. Search 5. View All 6. Exit (20 Marks)

import java.sql.*;
import java.io.*;

public class MobileDemo {
    public static void main(String[] args) throws Exception {
        Connection con = DriverManager.getConnection("jdbc:postgresql://localhost/tydb", "root", "root123");
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        PreparedStatement ps;
        ResultSet rs;
        Statement stmt = con.createStatement();
        
        Class.forName("org.postgresql.Driver");
        
        while (true) {
            System.out.println("\n1.Insert\n2.Modify\n3.Delete\n4.Search\n5.View all\n6.Exit");
            System.out.print("Enter choice: ");
            int ch = Integer.parseInt(br.readLine());
            
            if (ch == 6) System.exit(0);
            
            if (ch == 1 || ch == 2) {
                System.out.print("Enter Model No: "); int mno = Integer.parseInt(br.readLine());
                System.out.print("Enter Model Name: "); String mname = br.readLine();
                System.out.print("Enter Model Color: "); String mcolor = br.readLine();
                System.out.print("Enter Sim Type: "); String mstype = br.readLine();
                System.out.print("Enter Network Type: "); String mntype = br.readLine();
                System.out.print("Enter Battery Capacity: "); String capacity = br.readLine();
                System.out.print("Enter Internal Storage: "); int storage = Integer.parseInt(br.readLine());
                System.out.print("Enter RAM: "); int ram = Integer.parseInt(br.readLine());
                System.out.print("Enter Processor Type: "); String ptype = br.readLine();
                
                ps = con.prepareStatement("INSERT INTO MobileInfo VALUES(?,?,?,?,?,?,?,?,?)");
                ps.setInt(1, mno); ps.setString(2, mname); ps.setString(3, mcolor);
                ps.setString(4, mstype); ps.setString(5, mntype); ps.setString(6, capacity);
                ps.setInt(7, storage); ps.setInt(8, ram); ps.setString(9, ptype);
                System.out.println(ps.executeUpdate() > 0 ? "Data Inserted Successfully" : "Insertion Failed");
            }
            
            else if (ch == 3) {
                System.out.print("Enter Model No to Delete: ");
                ps = con.prepareStatement("DELETE FROM MobileInfo WHERE model_number=?");
                ps.setInt(1, Integer.parseInt(br.readLine()));
                System.out.println(ps.executeUpdate() > 0 ? "Data Deleted Successfully" : "Deletion Failed");
            }
            
            else if (ch == 4 || ch == 5) {
                String query = (ch == 4) ? "SELECT * FROM MobileInfo WHERE model_number=" + Integer.parseInt(br.readLine()) : "SELECT * FROM MobileInfo";
                rs = stmt.executeQuery(query);
                while (rs.next()) {
                    System.out.println("Model No: " + rs.getInt(1) + ", Name: " + rs.getString(2) + ", Color: " + rs.getString(3) + ", Sim: " + rs.getString(4) + ", Network: " + rs.getString(5) + ", Battery: " + rs.getString(6) + ", Storage: " + rs.getInt(7) + "GB, RAM: " + rs.getInt(8) + "GB, Processor: " + rs.getString(9));
                }
            }
        }
    }
}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Design a following Registration form and raise an appropriate exception if invalid 
information 
is entered like Birth Year ‘0000’

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.sql.*;

class InvalidBirthDateException extends Exception {
    public String toString() {
        return "Invalid Date Exception\n";
    }
}

public class Cowin extends JFrame implements ActionListener {
    JTextField adhar, byear, phone;
    JButton add;
    JRadioButton r1, r2, r3, r4, r5, r6, r7, r8;
    ButtonGroup bg, bg1, bg2;
    JComboBox<String> hos;
    String[] hospitals = {"METRO Hospital", "City Hospital", "Pune Hospital"};

    Cowin() {
        setTitle("Cowin Registration");
        setSize(800, 600);
        setLayout(new GridLayout(8, 2, 40, 40));
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        add(new JLabel("Adhar Card Number: "));
        adhar = new JTextField(10);
        add(adhar);
        add(new JLabel("Birth Year: "));
        byear = new JTextField(10);
        add(byear);
        add(new JLabel("Mobile Number: "));
        phone = new JTextField(10);
        add(phone);

        JPanel p1 = new JPanel(new FlowLayout());
        add(new JLabel("Age Group: "));
        r1 = new JRadioButton("18 & above");
        r2 = new JRadioButton("45 & above");
        p1.add(r1);
        p1.add(r2);
        add(p1);

        add(new JLabel("Select Hospital: "));
        hos = new JComboBox<>(hospitals);
        add(hos);

        JPanel p2 = new JPanel(new FlowLayout());
        add(new JLabel("Vaccines: "));
        r3 = new JRadioButton("Covishield");
        r4 = new JRadioButton("Covaxin");
        r5 = new JRadioButton("Sputnik V");
        p2.add(r3);
        p2.add(r4);
        p2.add(r5);
        add(p2);

        JPanel p3 = new JPanel(new FlowLayout());
        add(new JLabel("Time Slot: "));
        r6 = new JRadioButton("Morning");
        r7 = new JRadioButton("Afternoon");
        r8 = new JRadioButton("Evening");
        p3.add(r6);
        p3.add(r7);
        p3.add(r8);
        add(p3);

        JPanel p4 = new JPanel(new FlowLayout());
        add = new JButton("Add");
        p4.add(add);
        add(p4);
        add.addActionListener(this);

        bg = new ButtonGroup();
        bg.add(r1);
        bg.add(r2);
        bg1 = new ButtonGroup();
        bg1.add(r3);
        bg1.add(r4);
        bg1.add(r5);
        bg2 = new ButtonGroup();
        bg2.add(r6);
        bg2.add(r7);
        bg2.add(r8);

        setVisible(true);
    }

    public void actionPerformed(ActionEvent ae) {
        if (ae.getSource() == add) {
            try {
                int year = Integer.parseInt(byear.getText());
                if (year == 0000) throw new InvalidBirthDateException();
                Connection conn = DriverManager.getConnection("jdbc:postgresql:tybcs", "postgres", "postgres");
                PreparedStatement pstmt = conn.prepareStatement("INSERT INTO cowin VALUES(?,?,?,?,?,?,?)");
                pstmt.setString(1, adhar.getText());
                pstmt.setInt(2, year);
                pstmt.setString(3, phone.getText());
                pstmt.setString(4, (String) hos.getSelectedItem());
                pstmt.setString(5, bg.getSelection().getActionCommand());
                pstmt.setString(6, bg1.getSelection().getActionCommand());
                pstmt.setString(7, bg2.getSelection().getActionCommand());
                if (pstmt.executeUpdate() == 1) {
                    JOptionPane.showMessageDialog(null, "Successfully Inserted", "Success", JOptionPane.INFORMATION_MESSAGE);
                }
                pstmt.close();
                conn.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e, "ERROR OCCURRED", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    public static void main(String[] args) {
        new Cowin();
    }
}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Write a program to display information about all columns in the DONAR table using 
ResultSetMetaData. 

import java.sql.*;

class ResultSetMetaDataDemo {
    public static void main(String args[]) throws Exception {
        Class.forName("org.postgresql.Driver");
        System.out.println("Driver Loaded");

        Connection con = DriverManager.getConnection("jdbc:postgresql:tybcs", "postgres", "postgres");
        System.out.println("Connection Established");

        Statement stmt = con.createStatement();
        ResultSet rs = stmt.executeQuery("SELECT * FROM Student");
        ResultSetMetaData rsmd = rs.getMetaData();

        int n = rsmd.getColumnCount();
        System.out.println("No. of columns = " + n);

        for (int i = 1; i <= n; i++) {
            System.out.println("Column Number: " + i);
            System.out.println("===============");
            System.out.println("Column Name = " + rsmd.getColumnName(i));
            System.out.println("Column Type = " + rsmd.getColumnTypeName(i));
            System.out.println("Column Width = " + rsmd.getColumnDisplaySize(i));
            System.out.println("Column Precision = " + rsmd.getPrecision(i));
            System.out.println("Is Currency = " + rsmd.isCurrency(i));
            System.out.println("Is ReadOnly = " + rsmd.isReadOnly(i));
            System.out.println("Is Writable = " + rsmd.isWritable(i));
            System.out.println("Is Searchable = " + rsmd.isSearchable(i));
            System.out.println("Is Signed = " + rsmd.isSigned(i));
        }

        con.close();
    }
}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Write a program to display information about the database and list all the tables in the database. 
(Use DatabaseMetaData). 

import java.sql.*;

class DatabaseMetaDataDemo {
    public static void main(String args[]) throws Exception {
        Class.forName("org.postgresql.Driver");
        System.out.println("Driver Loaded");

        Connection con = DriverManager.getConnection("jdbc:postgresql:tybcs", "postgres", "postgres");
        System.out.println("Connection Established");

        DatabaseMetaData dmd = con.getMetaData();

        System.out.println("========== DB Details ==========");
        System.out.println("DB Name = " + dmd.getDatabaseProductName());
        System.out.println("DB Version = " + dmd.getDatabaseProductVersion());
        System.out.println("DB Driver Name = " + dmd.getDriverName());
        System.out.println("Driver Major Version = " + dmd.getDriverMajorVersion());
        System.out.println("Driver Minor Version = " + dmd.getDriverMinorVersion());
        System.out.println("URL of DB = " + dmd.getURL());
        System.out.println("Current User Name = " + dmd.getUserName());

        System.out.println("========== Tables ==========");
        String t[] = { "TABLE" };  // Corrected from "Tables" to "TABLE"
        ResultSet rs = dmd.getTables(null, null, null, t);
        while (rs.next()) {
            System.out.println(rs.getString("TABLE_NAME"));  // Corrected "Table NAme" to "TABLE_NAME"
        }

        System.in.read();  

        System.out.println("========== Views ==========");
        String v[] = { "VIEW" };  // Corrected from "Views" to "VIEW"
        rs = dmd.getTables(null, null, null, v);
        while (rs.next()) {
            System.out.println(rs.getString("TABLE_NAME"));  // Corrected "Table Views" to "TABLE_NAME"
        }

        con.close();
    }
}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Write a JSP program to display the details of PATIENT (PatientNo, PatientName, 
PatientAddress, Patientage,PatientDiease) in tabular form on browser.  

<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Retrieve Data from Database in JSP</title>
</head>
<body>

<%@ page import="java.sql.DriverManager, java.sql.ResultSet, java.sql.Statement, java.sql.Connection" %>

<%
    String id = request.getParameter("userId");
    String driverName = "org.postgresql.Driver";
    String connectionUrl = "jdbc:postgresql:";
    String dbName = "tybcs";
    String userId = "postgres";
    String password = "Pass@word";

    try {
        Class.forName(driverName);
    } catch (ClassNotFoundException e) {
        e.printStackTrace();
    }

    Connection connection = null;
    Statement statement = null;
    ResultSet resultSet = null;
%>

<h2 align="center"><strong>Retrieve Data from Database in JSP</strong></h2>

<table align="center" cellpadding="5" cellspacing="5" border="1">
    <tr bgcolor="blue">
        <td><b>Patient No</b></td>
        <td><b>Patient Name</b></td>
        <td><b>Patient Address</b></td>
        <td><b>Patient Age</b></td>
        <td><b>Patient Diseases</b></td>
    </tr>

    <%
        try {
            connection = DriverManager.getConnection(connectionUrl + dbName, userId, password);
            statement = connection.createStatement();
            String sql = "SELECT * FROM Patient";
            resultSet = statement.executeQuery(sql);

            while (resultSet.next()) {
    %>
    <tr bgcolor="#DEB887">
        <td><%= resultSet.getInt("pid") %></td>
        <td><%= resultSet.getString("pname") %></td>
        <td><%= resultSet.getString("padd") %></td>
        <td><%= resultSet.getInt("page") %></td>
        <td><%= resultSet.getString("pdis") %></td>
    </tr>
    <%
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (resultSet != null) resultSet.close();
            if (statement != null) statement.close();
            if (connection != null) connection.close();
        }
    %>
</table>

</body>
</html>

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Design an HTML page containing option buttons (Maths, Physics, Chemistry and 
Biology) and buttons submit and reset. When the user clicks submit, the server responds 
by adding a cookie containing the selected subject and sends a message back to the 
client. Program should not allow duplicate cookies to be written.

import java.io.IOException;
import java.io.PrintWriter;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

@WebServlet("/CookieDemo")
public class CookieDemo extends HttpServlet {
    private static final long serialVersionUID = 1L;

    public CookieDemo() {
        super();
    }

    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType("text/html");
        PrintWriter out = response.getWriter();

        Cookie c = new Cookie("sub", null);
        c.setMaxAge(0);
        response.addCookie(c);

        out.println("<html><body>");
        out.println("<h3>Cookie Reset...</h3>");
        out.println("</body></html>");
    }

    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType("text/html");
        PrintWriter out = response.getWriter();

        String subject = request.getParameter("sub");
        Cookie c1 = new Cookie("sub", subject);
        response.addCookie(c1);

        out.println("<html><body>");
        out.println("<h3>You have selected the subject: " + c1.getValue() + "</h3>");
        out.println("</body></html>");

        doGet(request, response);
    }
}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Write a program to display the Current Date using spring. 

//HelloBeans.java

package springDemo;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class MainApp {
    private static ApplicationContext context;

    public static void main(String[] args) {
        context = new ClassPathXmlApplicationContext("Beans.xml");

        HelloBeans hb = (HelloBeans) context.getBean("helloWorld");
        hb.getName();
        hb.getCurrentTimeUsingDate();
    }
}

//MainApp.java

package springDemo;

import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

public class HelloBeans {
    private String name;

    public void getName() {
        System.out.println("Your message is: " + name);
    }

    public void setName(String name) {
        this.name = name;
    }

    public void getCurrentTimeUsingDate() {
        Date date = new Date();
        String strDateFormat = "hh:mm:ss a";  // 12-hour format with AM/PM
        DateFormat dateFormat = new SimpleDateFormat(strDateFormat);
        String formattedDate = dateFormat.format(date);
        System.out.println("Current time of the day using Date in 12-hour format: " + formattedDate);
    }
}


//Beans.xml

<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
                           http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- Bean definition for HelloBeans -->
    <bean id="helloWorld" class="springDemo.HelloBeans">
        <property name="name" value="Welcome"/>
    </bean>

</beans>

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Create a Spring core example to display the message “If you can't explain it simply, 
you don't understand it well enough”.

//Beans.xml

<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
                           http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- Bean Definitions -->
    <bean id="helloworld" class="springDemo.HelloBeans">
        <property name="name" value="Welcome" />
    </bean>

</beans>

//HelloBeans.java

package springDemo;

public class HelloBeans {
    private String name;

    public void getName() {
        System.out.println("Your message is: " + name);
    }

    public void setName(String name) {
        this.name = name;
    }
}


//MainApp.java

package springDemo;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class MainApp {
    public static void main(String[] args) {
        ApplicationContext context = new ClassPathXmlApplicationContext("Beans.xml");
        HelloBeans hb = (HelloBeans) context.getBean("helloworld");

        hb.getName();
    }
}


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Design a servlet that provides information about a HTTP request from a client, 
such as IP address and browser type. The servlet also provides information 
about the server on which the servlet is running, such as the operating system 
type, and the names of currently loaded servlets. 

import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;

public class ServerInfo extends HttpServlet {
    protected void doGet(HttpServletRequest req, HttpServletResponse res) throws IOException, ServletException {
        res.setContentType("text/html");
        PrintWriter pw = res.getWriter();

        pw.println("<html><body><h2>Information about HTTP Request</h2>");
        pw.println("<br>Server Name: " + req.getServerName());
        pw.println("<br>Server Port: " + req.getServerPort());
        pw.println("<br>IP Address: " + req.getRemoteAddr());
        // Uncomment the below line if you want to print the request URI (not server path)
        // pw.println("<br>Server Path: " + req.getRequestURI());
        pw.println("<br>Client Browser: " + req.getHeader("User-Agent"));
        pw.println("</body></html>");

        pw.close();
    }
}
 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

